var documenterSearchIndex = {"docs":
[{"location":"znd.html#ZND-submodule","page":"ZND","title":"ZND submodule","text":"","category":"section"},{"location":"znd.html","page":"ZND","title":"ZND","text":"Documentation for SDtoolbox.jl","category":"page"},{"location":"znd.html","page":"ZND","title":"ZND","text":"Modules = [SDtoolbox.ZND]","category":"page"},{"location":"znd.html#SDtoolbox.ZND","page":"ZND","title":"SDtoolbox.ZND","text":"Shock and Detonation Toolbox \"ZND\" module\n\nCalculates ZND explosions.\n\nThis module defines the following functions:\n\nznd!\nzndsolve\ngetThermicity\nsoundspeed_fr\n\n################################################################################ Theory, numerical methods and applications are described in the following report:\n\nSDToolbox Numerical Tools for Shock and Detonation Wave Modeling,\nExplosion Dynamics Laboratory, Contributors:\nS. Browne, J. Ziegler, N. Bitter, B. Schmidt, J. Lawson and J. E. Shepherd,\nGALCIT Technical Report FM2018.001 Revised January 2021.\nCalifornia Institute of Technology, Pasadena, CA USA\n\nPlease cite this report and the website if you use these routines.\n\nPlease refer to LICENCE.txt or the above report for copyright and disclaimers.\n\nhttp://shepherd.caltech.edu/EDL/PublicResources/sdt/\n\n\n\n\n\n","category":"module"},{"location":"znd.html#SDtoolbox.ZND.getThermicity-Tuple{PyCall.PyObject}","page":"ZND","title":"SDtoolbox.ZND.getThermicity","text":"getThermicity(gas::PyObject)\n\nReturns the thermicity = sum ( (w/wi-hsi/(cpT))dyidt ).\n\nFUNCTION SYNTAX:     thermicity = getThermicity(gas)\n\nINPUT:     gas = Cantera gas object (not modified by this function)\n\nOUTPUT:     thermicity (1/s)\n\n\n\n\n\n","category":"method"},{"location":"znd.html#SDtoolbox.ZND.soundspeed_fr-Tuple{PyCall.PyObject}","page":"ZND","title":"SDtoolbox.ZND.soundspeed_fr","text":"soundspeed_fr(gas::PyObject)\n\nComputes the frozen sound speed by using a forward finite difference approximation and evaluating frozen composition states on the isentrope passing through the reference (S, V) state supplied by the gas object passed to the function.\n\nFUNCTION SYNTAX:     afrz =  soundspeedfr(gas)\n\nINPUT:     gas = working gas object (restored to original state at end of function)\n\nOUTPUT:     afrz = frozen sound speed = sqrt({d P/d rho){s,x0})\n\n\n\n\n\n","category":"method"},{"location":"znd.html#SDtoolbox.ZND.znd!-Tuple{Vector{Float64}, Vector{Float64}, Any, Real}","page":"ZND","title":"SDtoolbox.ZND.znd!","text":"znd!(dy::Vector{Float64},y::Vector{Float64},params,t::Real)::Vector{Float64}\n\nSet of ODEs to solve ZND Detonation Problem.\n\nINPUT:     t = time     y = solution array [pressure, density, position, species mass 1, 2, ..]     gas = working gas object     U₁ = shock velocity (m/s)     ρ₁ = initial density (kg/m^3)\n\nOUTPUT:     An array containing time derivatives of:         pressure, density, distance and species mass fractions,     formatted in a way that the integrator in zndsolve can recognize.\n\n\n\n\n\n","category":"method"},{"location":"znd.html#SDtoolbox.ZND.zndsolve-Tuple{PyCall.PyObject, PyCall.PyObject, Real}","page":"ZND","title":"SDtoolbox.ZND.zndsolve","text":"zndsolve(gas::PyObject,gas₁::PyObject,U₁::Real;              tend::Real=1e-3,maxstep::Real=1e-4,teval=nothing,              relTol::Real=1e-5,absTol::Real=1e-8,              advancedoutput::Bool=false,solver_algorithm=Rosenbrock23,)\n\nZND Model Detonation Computation Solves the set of ODEs defined in znd!().\n\nFUNCTION SYNTAX: output = zndsolve(gas,gas1,U1,**kwargs)\n\nINPUT     gas = Cantera gas object - postshock state     gas₁ = Cantera gas object - initial state     U₁ = shock velocity (m/s)\n\nOPTIONAL INPUT:     tend = end time for integration, in sec     maxstep = maximum time step for integration, in sec     teval = array of time values to evaluate the solution at.                 If left as \"None\", solver will select values.                 Sometimes these may be too sparse for good-looking plots.     relTol = relative tolerance     absTol = absolute tolerance     advancedoutput = calculates optional extra parameters such as induction lengths\n\nOUTPUT:     output = a dictionary containing the following results:         time = time array         distance = distance array\n\n    T = temperature array\n    P = pressure array\n    rho = density array\n    U = velocity array\n    thermicity = thermicity array\n    species = species mass fraction array\n\n    M = Mach number array\n    af = frozen sound speed array\n    g = gamma (cp/cv) array\n    wt = mean molecular weight array\n    sonic = sonic parameter (c^2-U^2) array\n\n    tfinal = final target integration time\n    xfinal = final distance reached\n\n    gas₁ = a copy of the input initial state\n    U₁ = shock velocity\n\n    and, if advanced_output=True:\n    ind_time_ZND = time to maximum thermicity gradient\n    ind_len_ZND = distance to maximum thermicity gradient\n    exo_time_ZND = pulse width (in secs) of thermicity  (using 1/2 max)\n    ind_time_ZND = pulse width (in meters) of thermicity (using 1/2 max)\n    max_thermicity_width_ZND = according to Ng et al definition\n\n\n\n\n\n","category":"method"},{"location":"cv.html#CV-submodule","page":"CV","title":"CV submodule","text":"","category":"section"},{"location":"cv.html","page":"CV","title":"CV","text":"Documentation for SDtoolbox.jl","category":"page"},{"location":"cv.html","page":"CV","title":"CV","text":"Modules = [SDtoolbox.CV]","category":"page"},{"location":"cv.html#SDtoolbox.CV","page":"CV","title":"SDtoolbox.CV","text":"Shock and Detonation Toolbox \"cv\" module\n\nCalculates constant-volume explosions.\n\nThis module defines the following functions:\n\ncvsolve\n\n################################################################################ Theory, numerical methods and applications are described in the following report:\n\nSDToolbox Numerical Tools for Shock and Detonation Wave Modeling,\nExplosion Dynamics Laboratory, Contributors:\nS. Browne, J. Ziegler, N. Bitter, B. Schmidt, J. Lawson and J. E. Shepherd,\nGALCIT Technical Report FM2018.001 Revised January 2021.\nCalifornia Institute of Technology, Pasadena, CA USA\n\nPlease cite this report and the website if you use these routines.\n\nPlease refer to LICENCE.txt or the above report for copyright and disclaimers.\n\nhttp://shepherd.caltech.edu/EDL/PublicResources/sdt/\n\n\n\n\n\n","category":"module"},{"location":"cv.html#SDtoolbox.CV.cv!-Tuple{Vector{Float64}, Vector{Float64}, Any, Real}","page":"CV","title":"SDtoolbox.CV.cv!","text":"cv!(dy::Vector{Float64},y::Vector{Float64},params,t::Real)::Vector{Float64}\n\nEvaluates the system of ordinary differential equations for an adiabatic, constant-volume, zero-dimensional reactor. It assumes that the \"gas\" object represents a reacting ideal gas mixture.\n\nINPUT:     t = time     y = solution array [temperature, species mass 1, 2, ...]     gas = working gas object\n\nOUTPUT:     An array containing time derivatives of:         temperature and species mass fractions,     formatted in a way that the integrator in cvsolve can recognize.\n\n\n\n\n\n","category":"method"},{"location":"cv.html#SDtoolbox.CV.cvsolve-Tuple{PyCall.PyObject}","page":"CV","title":"SDtoolbox.CV.cvsolve","text":"cvsolve(gas::PyObject;t_end::Real=1e-6,max_step::Real=1e-5,\n            t_eval=nothing,relTol::Real=1e-5,absTol::Real=1e-8)\n\nSolves the ODE system defined in cv!, taking the gas object input as the initial state.\n\nFUNCTION SYNTAX:     output = cvsolve(gas,**kwargs)\n\nINPUT:     gas = working gas object\n\nOPTIONAL INPUT:     tend = end time for integration, in sec     maxstep = maximum time step for integration, in sec     t_eval = array of time values to evaluate the solution at.                 If left as \"None\", solver will select values.                 Sometimes these may be too sparse for good-looking plots.     relTol = relative tolerance     absTol = absolute tolerances\n\nOUTPUT:     output = a dictionary containing the following results:         time = time array         T = temperature profile array         P = pressure profile array         speciesY = species mass fraction array         speciesX = species mole fraction array\n\n    gas = working gas object\n\n    exo_time = pulse width (in secs) of temperature gradient (using 1/2 max)\n    ind_time = time to maximum temperature gradient\n    ind_time_10 = time to 10% of maximum temperature gradient\n    ind_time_90 = time to 90% of maximum temperature gradient\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#Postshock-submodule","page":"Postshock","title":"Postshock submodule","text":"","category":"section"},{"location":"postshock.html","page":"Postshock","title":"Postshock","text":"Documentation for SDtoolbox.jl","category":"page"},{"location":"postshock.html","page":"Postshock","title":"Postshock","text":"Modules = [SDtoolbox.Postshock]","category":"page"},{"location":"postshock.html#SDtoolbox.Postshock","page":"Postshock","title":"SDtoolbox.Postshock","text":"Shock and Detonation Toolbox \"Postshock\" module\n\nCalculates CJ detonation speed and post-shock states for frozen and equilibrium cases.\n\nThis module defines the following functions:\n\nLSQ_CJspeed\nhug_fr\nhug_eq\nFHFP\nCJ_calc\nCJspeed\nPostShock_fr\nPostShock_eq\nshock_calc\nshk_eq_calc\n\n################################################################################ Theory, numerical methods and applications are described in the following report:\n\nSDToolbox Numerical Tools for Shock and Detonation Wave Modeling,\nExplosion Dynamics Laboratory, Contributors:\nS. Browne, J. Ziegler, N. Bitter, B. Schmidt, J. Lawson and J. E. Shepherd,\nGALCIT Technical Report FM2018.001 Revised January 2021.\nCalifornia Institute of Technology, Pasadena, CA USA\n\nPlease cite this report and the website if you use these routines.\n\nPlease refer to LICENCE.txt or the above report for copyright and disclaimers.\n\nhttp://shepherd.caltech.edu/EDL/PublicResources/sdt/\n\n\n\n\n\n","category":"module"},{"location":"postshock.html#SDtoolbox.Postshock.CJ_calc-NTuple{5, Any}","page":"Postshock","title":"SDtoolbox.Postshock.CJ_calc","text":"CJ_calc(gas, gas1, ERRFT, ERRFV, x)\n\nCalculates the Chapman-Jouguet wave speed using Reynolds' iterative method.\n\nFUNCTION SYNTAX:     [gas,w1] = CJ_calc(gas,gas1,ERRFT,ERRFV,x)\n\nINPUT:     gas = working gas object     gas1 = gas object at initial state     ERRFT,ERRFV = error tolerances for iteration     x = density ratio\n\nOUTPUT:     gas = gas object at equilibrium state     w1 = initial velocity to yield prescribed density ratio\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.CJspeed-NTuple{4, Any}","page":"Postshock","title":"SDtoolbox.Postshock.CJspeed","text":"defaults to CEA Algorithm \n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.FHFP-Tuple{Any, Any, Any}","page":"Postshock","title":"SDtoolbox.Postshock.FHFP","text":"FHFP(w1,gas2,gas1)\n\nUses the momentum and energy conservation equations to calculate error in pressure and enthalpy given shock speed, upstream (gas1) and downstream states (gas2).  States are not modified by these routines.\n\nFUNCTION SYNTAX:     [FH,FP] = FHFP(w1,gas2,gas1)\n\nINPUT:     w1 = shock speed (m/s)     gas2 = gas object at working/downstream state     gas1 = gas object at initial/upstream state\n\nOUTPUT:     FH,FP = error in enthalpy and pressure\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.FHFP_CJ2-Tuple{Any, Any, Any}","page":"Postshock","title":"SDtoolbox.Postshock.FHFP_CJ2","text":"FHFP_CJ2(gas,gas1,gas2)\n\nFHFP_CJ2 Uses the momentum and energy conservation equations and the equilibrium sound speed to calculate error in current pressure and enthalpy guesses.  In this case, state 2 is in equilibrium.\n\nFUNCTION SYNTAX [FH,FP,cjspeed] = FHFPCJ2(gas,gas1,gas2)\n\nINPUT gas = working gas object gas1 = gas object at initial state gas2 = dummy gas object (for calculating numerical derivatives)\n\nOUTPUT FH,FP = error in enthalpy and pressure cj_speed = CJ detonation speed (m/s)\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.LSQ_CJspeed-Tuple{Any, Any}","page":"Postshock","title":"SDtoolbox.Postshock.LSQ_CJspeed","text":"LSQ_CJspeed(x,y)\n\nDetermines least squares fit of parabola to input data\n\nFUNCTION SYNTAX: [a,b,c,R2,SSE,SST] = LSQ_CJspeed(x,y)\n\nINPUT:     x = independent data points     y = dependent data points\n\nOUTPUT:     a,b,c = coefficients of quadratic function (ax^2 + bx + c = 0)     R2 = R-squared value     SSE = sum of squares due to error     SST = total sum of squares\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.PostShock_eq-NTuple{5, Any}","page":"Postshock","title":"SDtoolbox.Postshock.PostShock_eq","text":"PostShock_eq(U1, P1, T1, q, mech)\n\nCalculates equilibrium post-shock state for a specified shock velocity and pre-shock state.\n\nFUNCTION SYNTAX:     gas = PostShock_eq(U1,P1,T1,q,mech)\n\nINPUT:     U1 = shock speed (m/s)     P1 = initial pressure (Pa)     T1 = initial temperature (K)     q = reactant species mole fractions in one of Cantera's recognized formats     mech = cti file containing mechanism data (e.g. 'gri30.cti')\n\nOUTPUT:     gas = gas object at equilibrium post-shock state\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.PostShock_fr-NTuple{5, Any}","page":"Postshock","title":"SDtoolbox.Postshock.PostShock_fr","text":"PostShock_fr(U1, P1, T1, q, mech)\n\nCalculates frozen post-shock state for a specified shock velocity and pre-shock state.\n\nFUNCTION SYNTAX:     gas = PostShock_fr(U1,P1,T1,q,mech)\n\nINPUT:     U1 = shock speed (m/s)     P1 = initial pressure (Pa)     T1 = initial temperature (K)     q = reactant species mole fractions in one of Cantera's recognized formats     mech = cti file containing mechanism data (e.g. 'gri30.cti')\n\nOUTPUT:     gas = gas object at frozen post-shock state\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock._CJspeed_CEA-NTuple{4, Any}","page":"Postshock","title":"SDtoolbox.Postshock._CJspeed_CEA","text":"_CJspeed_CEA(P1,T1,X1,mech)\n\nThis function calculates the CJ-detonation velocity for given initial conditions.\n\nIt is based on (i.e. mostly copied from) the CJ-detonation part of the NASA CEA Fortran95 code, available at http://www.grc.nasa.gov/WWW/CEAWeb/ceaHome.htm, which itself is based on \"Calculation of Detonation Properties and Effect of Independent Parameters on Gaseous Detonations\" by Frank J. Zeleznik and Sanford Gordon, ARS Journal, April 1962.\n\nINPUT: P1 = pressure in (Pa) T1 = temperature in (K) X1 = mole fraction column vector mech = file name of kinetic mechanism, e.g. 'gri30.xml'\n\nOUTPUT: cj_speed = CJ detonation velocity in (m/s)\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock._CJspeed_aeq-NTuple{4, Any}","page":"Postshock","title":"SDtoolbox.Postshock._CJspeed_aeq","text":"_CJspeed_aeq(P1, T1, q, mech)\n\nCJspeed_aeq Calculates CJ detonation velocity and CJ state based on equilibrium sound speed\n\nFUNCTION SYNTAX cj_speed,gas = CJspeed(P1,T1,q,mech)\n\nINPUT P1 = initial pressure (Pa) T1 = initial temperature (K) q = string of reactant species mole fractions mech = cti file containing mechanism data (i.e. 'gri30.cti')\n\nOUTPUT cj_speed = CJ detonation speed (m/s)\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock._CJspeed_umin-NTuple{4, Any}","page":"Postshock","title":"SDtoolbox.Postshock._CJspeed_umin","text":"_CJspeed_umin(P1, T1, q, mech; fullOutput=false)\n\nCalculates CJ detonation velocity for a given pressure, temperature, and composition.\n\nFUNCTION SYNTAX:     If only CJ speed required:     cjspeed = CJspeed(P1,T1,q,mech)     If full output required:     [cjspeed,R2,plot_data] = CJspeed(P1,T1,q,mech,fullOutput=true)\n\nINPUT:     P1 = initial pressure (Pa)     T1 = initial temperature (K)     q = reactant species mole fractions in one of Cantera's recognized formats     mech = cti file containing mechanism data (e.g. 'gri30.cti')\n\nOPTIONAL INPUT:     fullOutput = set true for R-squared value and pre-formatted plot data                 (the latter for use with sdtoolbox.utilities.CJspeed_plot)\n\nOUTPUT     cjspeed = CJ detonation speed (m/s)     R2 = R-squared value of LSQ curve fit (optional)     plotdata = tuple (rr,w1,dnew,a,b,c)                 rr = density ratio                 w1 = speed                 dnew = minimum density                 a,b,c = quadratic fit coefficients\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.equilSoundSpeeds-Tuple{Any}","page":"Postshock","title":"SDtoolbox.Postshock.equilSoundSpeeds","text":"equilSoundSpeeds(gas)\n\nCalculates equilibrium and frozen sound speeds. For the equilibrium sound speed, the gas is equilibrated holding entropy and specific volume constant.\n\nFUNCTION SYNTAX [aequil,afrozen] = equilSoundSpeeds(gas)\n\nINPUT gas = working gas object (modified inside function)\n\nOUTPUT aequil = equilibrium sound speed (m/s) afrozen = frozen sound speed (m/s)\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.hug_eq-NTuple{6, Any}","page":"Postshock","title":"SDtoolbox.Postshock.hug_eq","text":"hug_eq(x,vb,h1,P1,v1,gas)\n\nComputes difference in enthalpy computed from assumed (T, V) state and equilibrium composition state hugoniot evaluation.  Used with root solver such as 'fsolve' to compute equilibrium hugoniot as a function of volume.  Input gas object is modified to correspond to input (T, V) and an equilibrium composition.\n\nFUNCTION SYNTAX:     diff = hug_eq(x,vb,h1,P1,v1,gas)\n\nUSAGE:     fval = fsolve(hug_eq,Ta,args=(vb,h1,P1,v1,gas))         = equilibrium Hugoniot temperature (K) corresponding to vb\n\nINPUT:     Ta = initial guess for equilibrium Hugoniot temperature (K)     vb = desired equilibrium Hugoniot specific volume (m^3/kg)     h1 = enthalpy at state 1 (J/kg)     P1 = pressure at state 1 (Pa)     v1 = specific volume at state 1 (m^3/kg)     gas = working gas object\n\nOUTPUT:     enthalpy difference\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.hug_fr-NTuple{6, Any}","page":"Postshock","title":"SDtoolbox.Postshock.hug_fr","text":"hug_fr(x,vb,h1,P1,v1,gas)\n\nComputes difference in enthalpy computed from assumed (T, V) state and fixed composition (frozen) hugoniot evaluation.  Used with root solver such as 'fsolve' to compute frozen hugoniot as a function of volume.  Input gas object is modified to correspond to input (T, V).\n\nFUNCTION SYNTAX:     diff = hug_fr(x,vb,h1,P1,v1,gas)\n\nUSAGE:     fval = fsolve(hug_fr,Ta,args=(vb,h1,P1,v1,gas))         = frozen Hugoniot temperature (K) corresponding to vb\n\nINPUT:     Ta = initial guess for frozen Hugoniot temperature (K)     vb = desired frozen Hugoniot specific volume (m^3/kg)     h1 = enthalpy at state 1 (J/kg)     P1 = pressure at state 1 (Pa)     v1 = specific volume at state 1 (m^3/kg)     gas = working gas object\n\nOUTPUT:     enthalpy difference\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.partDeriv-NTuple{4, Any}","page":"Postshock","title":"SDtoolbox.Postshock.partDeriv","text":"partDeriv(T,P,X,gas)\n\nCalculates all needed variables related to partial derivatives, i.e γₛ (isentropic exponent), cₚ_eq (equilibrium specific heat at constant pressure), Dlvtp (d ln(v) / d ln(T) at constant pressure), Dlvpt (d ln(v) / d ln(P) at constant temperature). Derivatives are approximated via central differences.\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.shk_calc-NTuple{5, Any}","page":"Postshock","title":"SDtoolbox.Postshock.shk_calc","text":"shk_calc(U1, gas, gas1, ERRFT, ERRFV)\n\nCalculates frozen post-shock state using Reynolds' iterative method.\n\nFUNCTION SYNTAX:     gas = shk_calc(U1,gas,gas1,ERRFT,ERRFV)\n\nINPUT:     U1 = shock speed (m/s)     gas = working gas object     gas1 = gas object at initial state     ERRFT,ERRFV = error tolerances for iteration\n\nOUTPUT:     gas = gas object at frozen post-shock state\n\n\n\n\n\n","category":"method"},{"location":"postshock.html#SDtoolbox.Postshock.shk_eq_calc-NTuple{5, Any}","page":"Postshock","title":"SDtoolbox.Postshock.shk_eq_calc","text":"shk_eq_calc(U1, gas, gas1, ERRFT, ERRFV)\n\nCalculates equilibrium post-shock state using Reynolds' iterative method.\n\nFUNCTION SYNTAX:     gas = shk_calc(U1,gas,gas1,ERRFT,ERRFV)\n\nINPUT:     U1 = shock speed (m/s)     gas = working gas object     gas1 = gas object at initial state     ERRFT,ERRFV = error tolerances for iteration\n\nOUTPUT:     gas = gas object at equilibrium post-shock state\n\n\n\n\n\n","category":"method"},{"location":"cell_size.html#Cell-size-calculation","page":"Cell size calculation","title":"Cell size calculation","text":"","category":"section"},{"location":"cell_size.html","page":"Cell size calculation","title":"Cell size calculation","text":"Documentation for SDtoolbox.jl","category":"page"},{"location":"cell_size.html","page":"Cell size calculation","title":"Cell size calculation","text":"Modules = [SDtoolbox]","category":"page"},{"location":"cell_size.html#SDtoolbox.gavrikov-NTuple{4, Any}","page":"Cell size calculation","title":"SDtoolbox.gavrikov","text":"gavrikov(δ,θ,Tvn,T₀)\n\nCorrelation function for detonation cell width proposed by Gavrikov et al COMBUSTION AND FLAME 120:19�33 (2000) based on using a reaction zone length based on time to limiting reactant consumption in constant volume explosion approximation using vn postshock velocity to convert time to distance. Tested against a range of fuel-oxidizer diluent mixtures\n\nINPUT:     δ = reaction zone length based on time to 50consumption of limiting     reactant from CV computation and delta = time * wVN     θ = Eₐ/RTVN,  effective reduced activation energy based on CV     computation     Tvn = von Neumann (postshock temperature behind CJ shock wave)     T₀ = initial temperature\n\n\n\n\n\n","category":"method"},{"location":"cell_size.html#SDtoolbox.ng-Tuple{Any, Any}","page":"Cell size calculation","title":"SDtoolbox.ng","text":" ng(Δᵢ,χ)\n\nCorrelation function for detonation cell size from Ng, Hoi Dick, Yiguang Ju, and John H. S. Lee. 2007. Assessment of Detonation Hazards in High-Pressure Hydrogen Storage from Chemical Sensitivity Analysis. INTERNATIONAL JOURNAL OF HYDROGEN ENERGY 32 (1):93-99. Tested only against low pressure H2-air data.\n\nINPUT:     Δᵢ = induction zone length based on peak thermicity in ZND simulation     χ = 𝜺ᵢ*Δᵢ/Δᵣ where           𝜺ᵢ = reduced effective activation energy from CV computation           Δᵢ = distance to peak thermicity from ZND computation           Δᵣ = wvN/σ̇max from ZND computation\n\nSee Ng et al. Combustion Theory and Modeling 2005 for a discussion of the χ parameter.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SDtoolbox.jl","page":"Home","title":"SDtoolbox.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for SDtoolbox.jl","category":"page"}]
}
